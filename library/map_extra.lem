(******************************************************************************)
(* A library for finite maps                                                  *)
(******************************************************************************)

(* ========================================================================== *)
(* Header                                                                     *)
(* ========================================================================== *)

declare {isabelle;hol;ocaml} rename module = lem_map_extra

open import Bool Basic_classes Function Maybe List Num
include import Map

(* -------------------------------------------------------------------------- *)
(* find                                                                       *)
(* -------------------------------------------------------------------------- *)

val find : forall 'k 'v. Ord 'k => 'k -> map 'k 'v -> 'v
let find k m = match (lookup k m) with Just x -> x end

declare ocaml    target_rep function find = `Pmap.find`
declare isabelle target_rep function find = `map_find`
declare hol      target_rep function find = `FAPPLY`

declare compile_message find = "find is only defined if the key is found. Use lookup instead and handle the not-found case explicitly."

assert find_insert_1: (find 16 (insert (16 : nat) true empty) = true)
assert find_insert_2: (find 36 (insert 36 false (insert (16 : nat) true empty)) = false )

