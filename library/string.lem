declare {ocaml;isabelle;hol;coq} rename module = lem_string

open import Bool Basic_classes List
open import {ocaml} `Xstring`
open import {hol} `stringTheory`

declare ocaml target_rep type char = `char`
declare hol target_rep type char = `char`

assert char_simple_0: not (#'0' = ((#'1'):char))
assert char_simple_1: not (#'X' = #'Y') 
assert char_simple_2: not (#'\xAF' = #'\x00')
assert char_simple_3: not (#' ' = #'@')
assert char_simple_4: not (#'\\' = #'\n') 

val toCharList : string -> list char
declare ocaml    target_rep function toCharList = `Xstring.explode`
declare hol      target_rep function toCharList s = ``s
declare isabelle target_rep function toCharList s = ``s

val toString : list char -> string
declare ocaml    target_rep function toString = `Xstring.implode`
declare hol      target_rep function toString s = ``s
declare isabelle target_rep function toString s = ``s

val stringEq : string -> string -> bool
let inline stringEq = unsafe_structural_equality

val stringIneq : string -> string -> bool
let inline stringIneq = unsafe_structural_inequality

instance (Eq string)
  let (=) = stringEq
  let (<>) = stringIneq
end

val stringAppend : string -> string -> string
(*let stringAppend x y = (toString ((toCharList x) ++ (toCharList y))) *) (* TODO: Uncomment when toString and toCharList supported *)
declare ocaml target_rep function stringAppend = infix `^`
declare hol   target_rep function stringAppend = infix `++`
declare isabelle target_rep function stringAppend = infix `@`


