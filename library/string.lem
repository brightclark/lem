(*declare {ocaml;isabelle;hol;coq} rename module = lem_string*)
declare {ocaml} rename module = lem_string

open import Bool Basic_classes List
open import {ocaml} `Xstring`

type char
declare ocaml target_rep type char = `char`

val toCharList : string -> list char
declare ocaml target_rep function toCharList = `Xstring.explode`

val toString : list char -> string
declare ocaml target_rep function toString = `Xstring.implode`

val stringEqual : string -> string -> bool
declare ocaml target_rep function stringEqual = `(=)`
declare hol target_rep function stringEqual = `TODO`
declare isabelle target_rep function stringEqual = `TODO`
declare coq target_rep function stringEqual = `TODO`

val stringInequal : string -> string -> bool
let stringInequal x y = not (stringEqual x y)

instance (Eq string)
  let (=) = stringEqual
  let (<>) = stringInequal
end

val stringAppend : string -> string -> string
(*let stringAppend x y = (toString ((toCharList x) ++ (toCharList y))) *) (* TODO: Uncomment when toString and toCharList supported *)
declare ocaml target_rep function stringAppend = `(^)`
