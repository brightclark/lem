(******************************************************************************)
(* A library for sets                                                         *)
(*                                                                            *)
(* It mainly follows the Haskell Set-library                                  *)
(******************************************************************************)

(* ========================================================================== *)
(* Header                                                                     *)
(* ========================================================================== *)

open import Bool Basic_classes Maybe Function Num List Sorting
include import Set

declare ~{lem;coq} rename module = lem_set_extra[]


(* ----------------------------*)
(* set choose (be careful !)   *)
(* --------------------------- *)

val choose : forall 'a. Ord 'a => set 'a -> 'a
declare compile_message choose = "choose is non-deterministic and only defined for non-empty sets. It's result may differ between different backends. It may even not be a logical function, because the result may depend on the low-level representation of sets and be different for two representations of the same set."

declare hol      target_rep function choose = `CHOICE`
declare isabelle target_rep function choose = `set_choose`
declare ocaml    target_rep function choose = `Pset.choose`

lemma choose_sing: (forall x. choose {x} = x)
lemma choose_in: (forall s. not (null s) --> ((choose s) IN s))

assert choose_0: choose {(2:nat)} = 2
assert choose_1: choose {(5:nat)} = 5
assert choose_2: choose {(6:nat)} = 6
assert choose_3: choose {(6:nat);1;2} IN {6;1;2}


(* ----------------------------*)
(* toList                      *)
(* --------------------------- *)

val toList        : forall 'a. Ord 'a => set 'a -> list 'a
declare compile_message toList = "toList is only defined on finite sets and the order of the resulting list is unspecified and therefore might differ for diffrent backend implementations."

declare ocaml    target_rep function toList = `Pset.elements`
declare isabelle target_rep function toList = `list_of_set`
declare hol      target_rep function toList = `SET_TO_LIST`
declare coq      target_rep function toList = `set_to_list`


assert toList_0: toList ({} : set nat) = []
assert toList_1: toList {(6:nat); 1; 2} IN {[1;2;6]; [1;6;2]; [2;1;6]; [2;6;1]; [6;1;2]; [6;2;1]}
assert toList_2: toList ({(2:nat)} : set nat) = [2]


(* ----------------------------*)
(* toOrderedList               *)
(* --------------------------- *)

(* "toOrderedList" returns a sorted list. Therefore the result is (given a suitable order) deterministic.
   Therefore, it is much preferred to "toList". However, it still is only defined for finite sets. So, please
   use carefully and consider using set-operations instead of translating sets to lists, performing list manipulations
   and then transforming back to sets. *) 

val toOrderedListBy : forall 'a. ('a -> 'a -> bool) -> set 'a -> list 'a
declare isabelle target_rep function toOrderedListBy = `ordered_list_of_set`

val toOrderedList : forall 'a. Ord 'a => set 'a -> list 'a
let inline ~{isabelle;ocaml} toOrderedList l = sort (toList l)
let inline {isabelle} toOrderedList = toOrderedListBy (<=)
declare ocaml    target_rep function toOrderedList = `Pset.elements`

declare compile_message toOrderedList = "toList is only defined on finite sets. Even worse, it returns the elements in an unspecified order. The result may differ form backend to backend or even between different excutions in the same backend. The result may also depend on the low-level representation. The same set may have several low-level representations that might lead to different results for toList."

assert toOrderedList_0: toOrderedList ({} : set nat) = []
assert toOrderedList_1: toOrderedList {(6:nat); 1; 2} = [1;2;6]
assert toOrderedList_2: toOrderedList ({(2:nat)} : set nat) = [2]

