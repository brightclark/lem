(*========================================================================*)
(*                        Lem                                             *)
(*                                                                        *)
(*          Dominic Mulligan, University of Cambridge                     *)
(*          Francesco Zappa Nardelli, INRIA Paris-Rocquencourt            *)
(*          Gabriel Kerneis, University of Cambridge                      *)
(*          Kathy Gray, University of Cambridge                           *)
(*          Peter Boehm, University of Cambridge (while working on Lem)   *)
(*          Peter Sewell, University of Cambridge                         *)
(*          Scott Owens, University of Kent                               *)
(*          Thomas Tuerk, University of Cambridge                         *)
(*                                                                        *)
(*  The Lem sources are copyright 2010-2013                               *)
(*  by the UK authors above and Institut National de Recherche en         *)
(*  Informatique et en Automatique (INRIA).                               *)
(*                                                                        *)
(*  All files except ocaml-lib/pmap.{ml,mli} and ocaml-libpset.{ml,mli}   *)
(*  are distributed under the license below.  The former are distributed  *)
(*  under the LGPLv2, as in the LICENSE file.                             *)
(*                                                                        *)
(*                                                                        *)
(*  Redistribution and use in source and binary forms, with or without    *)
(*  modification, are permitted provided that the following conditions    *)
(*  are met:                                                              *)
(*  1. Redistributions of source code must retain the above copyright     *)
(*  notice, this list of conditions and the following disclaimer.         *)
(*  2. Redistributions in binary form must reproduce the above copyright  *)
(*  notice, this list of conditions and the following disclaimer in the   *)
(*  documentation and/or other materials provided with the distribution.  *)
(*  3. The names of the authors may not be used to endorse or promote     *)
(*  products derived from this software without specific prior written    *)
(*  permission.                                                           *)
(*                                                                        *)
(*  THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS    *)
(*  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED     *)
(*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE    *)
(*  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY       *)
(*  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL    *)
(*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE     *)
(*  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS         *)
(*  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER  *)
(*  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR       *)
(*  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN   *)
(*  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                         *)
(*========================================================================*)

val length : forall 'a.  list 'a -> num
val hd : forall 'a.  list 'a -> 'a
val tl : forall 'a.  list 'a -> list 'a
val nth : forall 'a.  list 'a -> num -> 'a
val rev : forall 'a.  list 'a -> list 'a
val append : forall 'a.  list 'a -> list 'a -> list 'a
val rev_append : forall 'a.  list 'a -> list 'a -> list 'a
val concat : forall 'a.  list (list 'a) -> list 'a
val flatten : forall 'a.  list (list 'a) -> list 'a
val map : forall 'a 'b.  ('a -> 'b) -> list 'a -> list 'b
val rev_map : forall 'a 'b.  ('a -> 'b) -> list 'a -> list 'b
val fold_left : forall 'a 'b.  ('a -> 'b -> 'a) -> 'a -> list 'b -> 'a
val fold_right : forall 'a 'b.  ('a -> 'b -> 'b) -> list 'a -> 'b -> 'b
val map2 : forall 'a 'b 'c.  ('a -> 'b -> 'c) -> list 'a -> list 'b -> list 'c
val rev_map2 : forall 'a 'b 'c.  ('a -> 'b -> 'c) -> list 'a -> list 'b -> list 'c
val fold_left2 : forall 'a 'b 'c.  ('a -> 'b -> 'c -> 'a) -> 'a -> list 'b -> list 'c -> 'a
val fold_right2 : forall 'a 'b 'c.  ('a -> 'b -> 'c -> 'c) -> list 'a -> list 'b -> 'c -> 'c
val for_all : forall 'a.  ('a -> bool) -> list 'a -> bool
val \\exists : forall 'a.  ('a -> bool) -> list 'a -> bool
val for_all2 : forall 'a 'b.  ('a -> 'b -> bool) -> list 'a -> list 'b -> bool
val exists2 : forall 'a 'b.  ('a -> 'b -> bool) -> list 'a -> list 'b -> bool
val mem : forall 'a.  'a -> list 'a -> bool
val find : forall 'a.  ('a -> bool) -> list 'a -> 'a
val filter : forall 'a.  ('a -> bool) -> list 'a -> list 'a
val find_all : forall 'a.  ('a -> bool) -> list 'a -> list 'a
val partition : forall 'a.  ('a -> bool) -> list 'a -> list 'a * list 'a
val assoc : forall 'a 'b.  'a -> list ('a * 'b) -> 'b
val mem_assoc : forall 'a 'b.  'a -> list ('a * 'b) -> bool
val remove_assoc : forall 'a 'b.  'a -> list ('a * 'b) -> list ('a * 'b)
val split : forall 'a 'b.  list ('a * 'b) -> list 'a * list 'b
val combine : forall 'a 'b.  list 'a -> list 'b -> list ('a * 'b)
val sort : forall 'a.  ('a -> 'a -> int) -> list 'a -> list 'a
val stable_sort : forall 'a.  ('a -> 'a -> int) -> list 'a -> list 'a
val fast_sort : forall 'a.  ('a -> 'a -> int) -> list 'a -> list 'a
val merge : forall 'a.  ('a -> 'a -> int) -> list 'a -> list 'a -> list 'a
