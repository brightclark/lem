(*========================================================================*)
(*                        Lem                                             *)
(*                                                                        *)
(*          Dominic Mulligan, University of Cambridge                     *)
(*          Francesco Zappa Nardelli, INRIA Paris-Rocquencourt            *)
(*          Gabriel Kerneis, University of Cambridge                      *)
(*          Kathy Gray, University of Cambridge                           *)
(*          Peter Boehm, University of Cambridge (while working on Lem)   *)
(*          Peter Sewell, University of Cambridge                         *)
(*          Scott Owens, University of Kent                               *)
(*          Thomas Tuerk, University of Cambridge                         *)
(*                                                                        *)
(*  The Lem sources are copyright 2010-2013                               *)
(*  by the UK authors above and Institut National de Recherche en         *)
(*  Informatique et en Automatique (INRIA).                               *)
(*                                                                        *)
(*  All files except ocaml-lib/pmap.{ml,mli} and ocaml-libpset.{ml,mli}   *)
(*  are distributed under the license below.  The former are distributed  *)
(*  under the LGPLv2, as in the LICENSE file.                             *)
(*                                                                        *)
(*                                                                        *)
(*  Redistribution and use in source and binary forms, with or without    *)
(*  modification, are permitted provided that the following conditions    *)
(*  are met:                                                              *)
(*  1. Redistributions of source code must retain the above copyright     *)
(*  notice, this list of conditions and the following disclaimer.         *)
(*  2. Redistributions in binary form must reproduce the above copyright  *)
(*  notice, this list of conditions and the following disclaimer in the   *)
(*  documentation and/or other materials provided with the distribution.  *)
(*  3. The names of the authors may not be used to endorse or promote     *)
(*  products derived from this software without specific prior written    *)
(*  permission.                                                           *)
(*                                                                        *)
(*  THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS    *)
(*  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED     *)
(*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE    *)
(*  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY       *)
(*  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL    *)
(*  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE     *)
(*  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS         *)
(*  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER  *)
(*  IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR       *)
(*  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN   *)
(*  IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                         *)
(*========================================================================*)

val True : bool
val False : bool
val (=) : forall 'a. 'a -> 'a -> bool
val ~= : forall 'a. 'a -> 'a -> bool
val (<) : num -> num -> bool
val (<=) : num -> num -> bool
val (>) : num -> num -> bool
val (>=) : num -> num -> bool
val ~ : bool -> bool
val (&) : bool -> bool -> bool
val \\| : bool -> bool -> bool 
val (-->) : bool -> bool -> bool 
val (+) : num -> num -> num
val (-) : num -> num -> num
val set_diff : forall 'a. set 'a -> set 'a -> set 'a
val fst : forall 'a 'b. 'a * 'b -> 'a
val snd : forall 'a 'b. 'a * 'b -> 'b
val Pair : forall 'a 'b. 'a -> 'b -> 'a * 'b
val The : forall 'a. ('a -> bool) -> 'a
val \\# : forall 'a. 'a -> list 'a -> list 'a
val set_choose : forall 'a. set 'a -> 'a
val set_filter : forall 'a. ('a -> bool) -> set 'a -> set 'a
val set_cross : forall 'a 'b. set 'a -> set 'b -> set ('a * 'b)
val Sigma : forall 'a 'b. set 'a -> ('a -> set 'b) -> set ('a * 'b)

val \\* : num -> num -> num
val div : num -> num -> num

(* Integer operation *)
type int = Hol.Integer.int
val int_add : int -> int -> int
val int_sub : int -> int -> int
val int_mul : int -> int -> int
val int_exp : int -> num -> int
val int_div : int -> int -> int
val int_mod : int -> int -> int
val int_lt : int -> int -> bool
val int_le : int -> int -> bool
val int_gt : int -> int -> bool
val int_ge : int -> int -> bool
val int : num -> int
val int_neg : int -> int

(* Do not have implementations yet *)
val bitwise_and : num -> num -> num
val bitwise_or  : num -> num -> num
val bitwise_xor : num -> num -> num
val bitwise_not : num -> num

val num_asr : num -> num -> num
val num_lsl : num -> num -> num
val num_lsr : num -> num -> num

val trancl  : forall 'a. set ('a * 'a) -> set ('a * 'a)
val rtrancl : forall 'a. set ('a * 'a) -> set ('a * 'a)
