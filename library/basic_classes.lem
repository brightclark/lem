(******************************************************************************)
(* Basic Type Classes                                                         *)
(******************************************************************************)

open import Bool

declare {isabelle;ocaml;hol} rename module = lem_basic_classes 

(* ========================================================================== *)
(* Equality                                                                   *)
(* ========================================================================== *)

(* Lem`s default equality (=) is defined by the following type-class Eq.
   This typeclass should define equality on an abstract datatype 'a. It should
   always coincide with the default equality of Coq, HOL and Isabelle.
   For OCaml, it might be different, since abstract datatypes like sets
   might have fancy equalities. *)

class ( Eq 'a ) 
  val (=) [`isEqual`] : 'a -> 'a -> bool
end

declare coq target_rep function isEqual = infix `=`

class ( Ineq 'a ) 
  val (<>) [`isInequal`] : 'a -> 'a -> bool
end

declare coq target_rep function isInequal = infix `/=`


(* (=) should for all instances be an equivalence relation 
   The isEquivalence predicate of relations could be used here.
   However, this would lead to a cyclic dependency. *)

(* TODO: add later, once lemmata can be assigned to classes 
lemma eq_equiv: ((forall x. (x = x)) &&
                 (forall x y. (x = y) <-> (y = x)) &&
                 (forall x y z. ((x = y) && (y = z)) --> (x = z)))
*)

(* Structural equality *)

(* Sometimes, it is also handy to be able to use structural equality.
   This equality is mapped to the build-in equality of backends. This equality
   differs significantly for each backend. For example, OCaml can`t check equality
   of function types, whereas HOL can.  When using structural equality, one should 
   know what one is doing. The only guarentee is that is behaves like 
   the native backend equality.

   A lengthy name for structural equality is used to discourage its direct use.
   It also ensures that users realise it is unsafe (e.g. OCaml can`t check two functions
   for equality *)
val unsafe_structural_equality : forall 'a. 'a -> 'a -> bool

declare hol      target_rep function unsafe_structural_equality = infix `=`
declare ocaml    target_rep function unsafe_structural_equality = infix `=`
declare isabelle target_rep function unsafe_structural_equality = infix `=`
declare coq      target_rep function unsafe_structural_equality = `classical_boolean_equivalence`

val unsafe_structural_inequality : forall 'a. 'a -> 'a -> bool
let unsafe_structural_inequality x y = not (unsafe_structural_equality x y)
declare isabelle target_rep function unsafe_structural_inequality = infix `\<noteq>`
declare hol      target_rep function unsafe_structural_inequality = infix `<>`

(* The default for equality is the unsafe structural one. It can 
   (and should) be overriden for concrete types later. *)
default_instance forall 'a. (Eq 'a) 
  let (=) = unsafe_structural_equality
end

default_instance forall 'a. Eq 'a => (Ineq 'a) 
  let (<>) x y = not (x = y)
end

(* for HOL and Isabelle, be even stronger and always(!) use
   standard equality *)
let inline {hol;isabelle} (=)  = unsafe_structural_equality
let inline {hol;isabelle} (<>) = unsafe_structural_inequality


(* ========================================================================== *)
(* Orderings                                                                  *)
(* ========================================================================== *)

(* The type-class Ord represents total orders (also called linear orders) *)
type ordering = LT | EQ | GT

declare ocaml target_rep type ordering = `int`
declare ocaml target_rep function LT = `-1`
declare ocaml target_rep function EQ = `0`
declare ocaml target_rep function GT = `1`

declare coq target_rep type ordering = `ordering`
declare coq target_rep function LT = `LT`
declare coq target_rep function EQ = `EQ`
declare coq target_rep function GT = `GT`

let orderingIsLess r       = (match r with LT -> true | _ -> false end)
let orderingIsGreater r    = (match r with GT -> true | _ -> false end)
let orderingIsEqual r      = (match r with EQ -> true | _ -> false end)
let inline orderingIsLessEqual r  = not (orderingIsGreater r)
let inline orderingIsGreaterEqual r  = not (orderingIsLess r)

let ordering_cases r lt eq gt =
  if orderingIsLess r then lt else
  if orderingIsEqual r then eq else gt

declare ocaml target_rep function orderingIsLess    = `Lem.orderingIsLess` 
declare ocaml target_rep function orderingIsGreater = `Lem.orderingIsGreater`
declare ocaml target_rep function orderingIsEqual   = `Lem.orderingIsEqual`

declare ocaml target_rep function ordering_cases = `Lem.ordering_cases` 

declare {ocaml} pattern_match exhaustive ordering = [ LT; EQ ; GT ] ordering_cases

assert ordering_cases_0 : (ordering_cases LT true false false)
assert ordering_cases_1 : (ordering_cases EQ false true false)
assert ordering_cases_2 : (ordering_cases GT false false true)
assert ordering_match_1 : (match LT with GT -> false && false | _ -> true end)
assert ordering_match_2 : (match EQ with GT -> false | _ -> true end)
assert ordering_match_3 : (match GT with GT -> true && true | _ -> false end)
assert ordering_match_4 : ((fun r -> (match r with GT -> false | _ -> true end)) LT)
assert ordering_match_5 : ((fun r -> (match r with GT -> false | _ -> true end)) EQ)
assert ordering_match_6 : ((fun r -> (match r with GT -> true && true | _ -> false end)) GT)


val orderingEqual : ordering -> ordering -> bool
let inline ~{ocaml} orderingEqual = unsafe_structural_equality
declare ocaml target_rep function orderingEqual = `Lem.orderingEqual`

instance (Eq ordering) 
  let (=) = orderingEqual
end

class ( Ord 'a ) 
  val compare                 : 'a -> 'a -> ordering
  val (<)  [`isLess`]         : 'a -> 'a -> bool
  val (<=) [`isLessEqual`]    : 'a -> 'a -> bool
  val (>)  [`isGreater`]      : 'a -> 'a -> bool
  val (>=) [`isGreaterEqual`] : 'a -> 'a -> bool 
end

declare coq target_rep function isLess = `isLess`
declare coq target_rep function isLessEqual = `isLessEqual`
declare coq target_rep function isGreater = `isGreater`
declare coq target_rep function isGreaterEqual = `isGreaterEqual`


(* Ocaml provides default, polymorphic compare functions. Let's use them
   as the default. However, because used in a typeclass they must be 
   defined for all targets. So, use a dummy instantiation for other tragets *)
val defaultCompare   : forall 'a. 'a -> 'a -> ordering
val defaultLess      : forall 'a. 'a -> 'a -> bool
val defaultLessEq    : forall 'a. 'a -> 'a -> bool
val defaultGreater   : forall 'a. 'a -> 'a -> bool
val defaultGreaterEq : forall 'a. 'a -> 'a -> bool

(* DUMMY INSTANTIATIONS, which prevent trouble, but don't make sense,
   this is a hack to get things working quickly. *)
let inline defaultCompare   x y = EQ
let inline defaultLess      x y = true
let inline defaultLessEq    x y = true
let inline defaultGreater   x y = true
let inline defaultGreaterEq x y = true

declare ocaml target_rep function defaultCompare   = `compare`
declare ocaml target_rep function defaultLess      = `<`
declare ocaml target_rep function defaultLessEq    = `<=`
declare ocaml target_rep function defaultGreater   = `>`
declare ocaml target_rep function defaultGreaterEq = `>=`


default_instance forall 'a. ( Ord 'a )
  let compare = defaultCompare
  let (<=) = defaultLessEq
  let (>=) = defaultGreaterEq
  let (<) = defaultLess
  let (>) = defaultGreater
end


(* TODO: add later 
lemma isLess_alt_def        : (forall x y. (x < y) = (let r = compare x y in (r = LT || r = EQ)))
lemma isLessEqual_alt_def   : (forall x y. (x <= y) = (compare x y = LT))
lemma isGreater_alt_def     : (forall x y. (x > y) = (y < x))
lemma isGreaterEqual_alt_def: (forall x y. (x >= y) = (y <= x))

(* compare should really be a total order *)
lemma ord_OK_1: (
  (forall x y. (compare x y = EQ) <-> (compare y x = EQ)) &&
  (forall x y. (compare x y = LT) <-> (compare y x = GT)))

lemma ord_OK_2: (
  (forall x y z. (x <= y) && (y <= z) --> (x <= z)) &&
  (forall x y. (x <= y) || (y <= x))
)
*)

(* let's derive a compare function from the Ord type-class *)
val ordCompare : forall 'a. Eq 'a, Ord 'a => 'a -> 'a -> ordering
let ordCompare x y =
  if (x < y) then LT else
  if (x = y) then EQ else GT

class ( OrdMaxMin 'a ) 
  val max : 'a -> 'a -> 'a
  val min : 'a -> 'a -> 'a
end

val defaultMin : forall 'a. Ord 'a => 'a -> 'a -> 'a
let defaultMin x y = if (x <= y) then x else y
declare isabelle target_rep function defaultMin = `min`
declare ocaml    target_rep function defaultMin = `min`

val defaultMax : forall 'a. Ord 'a => 'a -> 'a -> 'a
let defaultMax x y = if (y <= x) then x else y
declare isabelle target_rep function defaultMax = `max`
declare ocaml    target_rep function defaultMax = `max`


default_instance forall 'a. Ord 'a => ( OrdMaxMin 'a) 
  let max = defaultMax
  let min = defaultMin
end


(* ========================================================================== *)
(* Instantiations                                                             *)
(* ========================================================================== *)

instance (Eq bool)
  let (=) = equiv
end

let boolCompare b1 b2 = match (b1, b2) with
  | (true, true) -> EQ
  | (true, false) -> GT
  | (false, true) -> LT
  | (false, false) -> EQ
end

instance (Ord bool)
  let compare = boolCompare
  let (<) x y = (not x && y)
  let (<=) x y = (x --> y)
  let (>) x y = (not y && x)
  let (>=) x y = (y --> x)
end

val pairEqual : forall 'a 'b. Eq 'a, Eq 'b => ('a * 'b) -> ('a * 'b) -> bool
let pairEqual (a1, b1) (a2, b2) = (a1 = a2) && (b1 = b2)

val pairEqualBy : forall 'a 'b. ('a -> 'a -> bool) -> ('b -> 'b -> bool) -> ('a * 'b) -> ('a * 'b) -> bool
declare ocaml    target_rep function pairEqualBy = `Lem.pair_equal`
declare coq      target_rep function pairEqualBy = `tuple_equal_by`

let inline {hol;isabelle} pairEqual = unsafe_structural_equality
let inline {ocaml;coq} pairEqual = pairEqualBy isEqual isEqual

instance forall 'a 'b. Eq 'a, Eq 'b => (Eq ('a * 'b))
  let (=) = pairEqual
end

let pairCompare (a1, b1) (a2, b2) =
  match compare a1 a2 with
    | LT -> LT
    | GT -> GT
    | EQ -> compare b1 b2
  end

let pairLess (x1, x2) (y1, y2) = (x1 < y1) || ((x1 <= y1) && (x2 < y2))
let pairLessEq (x1, x2) (y1, y2) = (x1 < y1) || ((x1 <= y1) && (x2 < y2))

let pairGreater x12 y12 = pairLess y12 x12
let pairGreaterEq x12 y12 = pairLessEq y12 x12

instance forall 'a 'b. Ord 'a, Ord 'b => (Ord ('a * 'b))
  let compare = pairCompare
  let (<)  = pairLess
  let (<=) = pairLessEq
  let (>)  = pairGreater
  let (>=) = pairGreaterEq
end
