(* [[vconcat vec1 vec2]] creates a new vector containing the elements of v1 followed by the elements of v2 *)
val vconcat : forall 'a ''n ''m. vector ''n 'a -> vector ''m 'a -> vector (''n + ''m) 'a
let inline {ocaml} vconcat = Ocaml.Vector.vconcat

(* [[vmap f vec]] creates a new vector from vec, applying f to each element. The [[''i]]th element of [[vmap f vec]] is the same as [[f (vec.[''i])]] *)
val vmap : forall 'a 'b ''n. ('a ->'b) ->  vector ''n 'a -> vector ''n 'b
let inline {ocaml} vmap = Ocaml.Vector.vmap

(* [[vfold f base vec]] performs a left to right fold over vec *)
val vfold : forall 'a 'b ''n. ('b -> 'a -> 'b) -> 'b -> vector ''n 'a -> 'b
let inline {ocaml} vfold = Ocaml.Vector.vfold

(* [[vzip vec1 vec2]] creates a new vector with the [[''i]]th element being [[(vec1.[''i],vec2.[''i])]] *)
val vzip : forall 'a 'b ''n. vector ''n 'a -> vector ''n 'b -> vector ''n ('a * 'b)  
let inline {ocaml} vzip = Ocaml.Vector.vzip

(* [[vmapacc f vec acc]] creates a new vector from [[vec]] using [[f]] in a left to right pass, where an accumulator [[acc]] is returned and passed on each call to f*)
val vmapacc : forall 'a 'b 'c ''n. ('a -> 'c -> 'b * 'c) -> vector ''n 'a -> 'c -> (vector ''n 'b) * 'c
let inline {ocaml} vmapacc = Ocaml.Vector.vmapacc

(* [[vmapi f vec]] creates a new vector from vec, applying f to each element. The [[''i]]th element of [[vmap f vec]] is the same as [[f vec.[''i] ''i]] *)
val vmapi : forall 'a 'b ''n. (num -> 'a -> 'b) -> vector ''n 'a -> vector ''n 'b
let inline {ocaml} vmapi = Ocaml.Vector.vmapi

(* [[extend default vec]] creates a new vector from vec, which is ''m longer based on type inference and each of the new vector cells has value [[default]] *)
val extend : forall 'a ''n ''m. 'a -> vector ''n 'a -> vector (''n + ''m) 'a
let inline {ocaml} extend = Ocaml.Vector.extend

(* [[duplicate vec]] creates a new vector from vec which is twice as long as [[vec]] and repeats the elements. Same as vconcat vec1 vec2 *)
val duplicate : forall 'a ''n. vector ''n 'a -> vector (2 * ''n) 'a
let inline {ocaml} duplicate = Ocaml.Vector.duplicate

(* [[vlength vec]] returns a num representing the length of vec *)
val vlength : forall 'a ''n. vector ''n 'a -> num
let inline {ocaml} vlength = Ocaml.Vector.vlength

(* exp.[''n]*)
(* Library call for special syntax of accessing the contents of a vector cell *)
val vector_access : forall 'a ''n ''m. num -> vector ''m 'a -> 'a

(* exp.[''n .. ''m] *)
(* Library call for special syntax of creating a new vector of length [[''m - ''n]] from [[exp]] *)
val vector_slice : forall 'a ''n ''m ''o ''p. num -> num -> vector ''o 'a -> vector ''p 'a