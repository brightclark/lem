(* TODO: This is not the right type *)
type int = Hol.Integer.int

(* Addition *)
val (+) : int -> int -> int
let inline {ocaml} (+) = Ocaml.Num.add_num

(* Subtraction *)
val (-) : int -> int -> int
let inline {ocaml} (-) = Ocaml.Num.sub_num

(* Multiplication *)
val ( * ) : int -> int -> int
let inline {ocaml} ( * ) = Ocaml.Num.mult_num

(* Integer Exponentiation *)
val ( ** ) : int -> int -> int
let inline {ocaml} ( ** ) = Ocaml.Num.power_num

(* Integer division *)
val (/) : int -> int -> int
let inline {ocaml} (/) = Ocaml.Num.div_num

(* Euclidian division *)
val div : int -> int -> int
let inline {ocaml} div = Ocaml.Num.quo_num

(* Modulo *)
val (%) : int -> int -> int
let inline {ocaml} (%) = Ocaml.Num.mod_num

(* Less *)
val (<) : int -> int -> bool
let inline {ocaml} (<) = Ocaml.Num.lt_num

(* Less equal *)
val (<=) : int -> int -> bool
let inline {ocaml} (<=) = Ocaml.Num.le_num

(* Greater *)
val (>) : int -> int -> bool
let inline {ocaml} (>) = Ocaml.Num.gt_num

(* Greater equal *)
val (>=) : int -> int -> bool
let inline {ocaml} (>=) = Ocaml.Num.ge_num

(* transformation of num to integer *)
val int : num -> int
let inline {ocaml} int = Ocaml.Num.num_of_int

(* negation, i.e. neg 5 = -5 *)
val neg : int -> int
let inline {ocaml} neg = Ocaml.Num.minus_num

val eq: int -> int -> bool
let inline {ocaml} eq = Ocaml.Num.eq_num

val int_of_string: string -> int
let inline {ocaml} int_of_string = Ocaml.Num.num_of_string
