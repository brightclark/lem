declare {isabelle;hol;ocaml;coq} rename module = lem_show

open import String Maybe Num Basic_classes

class (Show 'a)
  val show: 'a -> string
end

instance (Show string)
  let show s = "\"" ^ s ^ "\""
end

let stringFromMaybe showX = function
  | Just x ->
      "Just (" ^ showX x ^ ")"
  | Nothing ->
      "Nothing"
end

instance forall 'a. Show 'a => (Show (maybe 'a))
  let show x_opt = stringFromMaybe show x_opt
end

let rec stringFromListAux showX = function
  | [] ->
      ""
  | [x] ->
      showX x
  | x::xs' ->
      showX x ^ "; " ^ stringFromListAux showX xs'
  end

let stringFromList showX xs =
  "[" ^ stringFromListAux showX xs ^ "]"

instance forall 'a. Show 'a => (Show (list 'a))
  let show xs = stringFromList show xs
end

let stringFromPair showX showY (x,y) =
  "(" ^ showX x ^ ", " ^ showY y ^ ")"

instance forall 'a 'b. Show 'a, Show 'b => (Show ('a * 'b))
  let show = stringFromPair show show
end

instance (Show bool)
  let show b = if b then "true" else "false"
end
