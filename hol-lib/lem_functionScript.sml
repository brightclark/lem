(*Generated by Lem from ../library-new/function.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_boolTheory optionTheory basic_classesTheory;

val _ = numLib.prefer_num();



val _ = new_theory "lem_function"

(******************************************************************************)
(* A library for common operations on functions                               *)
(******************************************************************************)

(*open import Bool Maybe Basic_classes*)

(* ----------------------- *)
(* identity function       *)
(* ----------------------- *)

(*val id : forall 'a. 'a -> 'a*)
(*let id x = x*)

(* ----------------------- *)
(* constant function       *)
(* ----------------------- *)

(*val const : forall 'a 'b. 'a -> 'b -> 'a*)


(* ----------------------- *)
(* function composition    *)
(* ----------------------- *)

(*val comb : forall 'a 'b 'c. ('b -> 'c) -> ('a -> 'b) -> ('a -> 'c)*)
val _ = Define `
 (comb f g = (\ x . f (g x)))`;



(* ----------------------- *)
(* function application    *)
(* ----------------------- *)

(*val $ [`apply`] : forall 'a 'b. ('a -> 'b) -> ('a -> 'b)*)
(*let $ f = (fun x -> f x)*)


(* ----------------------- *)
(* flipping argument order *)
(* ----------------------- *)

(*val flip : forall 'a 'b 'c. ('a -> 'b -> 'c) -> ('b -> 'a -> 'c)*)
val _ = Define `
 (flip f = (\ x y . f y x))`;

val _ = export_theory()

