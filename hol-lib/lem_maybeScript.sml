(*Generated by Lem from ../library-new/maybe.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_boolTheory basic_classesTheory;

val _ = numLib.prefer_num();



val _ = new_theory "lem_maybe"



(*open import Bool Basic_classes*) 

(* ========================================================================== *)
(* Basic stuff                                                                *)
(* ========================================================================== *)

(*type maybe 'a = 
  | Nothing
  | Just of 'a*)


(*val maybeEqual : forall 'a. Eq 'a => maybe 'a -> maybe 'a -> bool*)
(*val maybeEqualBy : forall 'a. ('a -> 'a -> bool) -> maybe 'a -> maybe 'a -> bool*)

val _ = Define `
 (maybeEqualBy eq x y = ((case (x,y) of
    ((NONE), (NONE)) => T
  | ((NONE), (SOME _)) => F
  | ((SOME _), (NONE)) => F
  | ((SOME x'), (SOME y')) => (eq x' y')
)))`;


val _ = Define `
(instance_Basic_classes_Eq_Maybe_maybe_dict dict_Basic_classes_Eq_a =(<|

  isEqual_method := (=)|>))`;
  

(* ----------------------- *)
(* maybe                   *)
(* ----------------------- *)

(*val maybe : forall 'a 'b. 'b -> ('a -> 'b) -> maybe 'a -> 'b*)
(*let maybe d f mb = match mb with 
  | Just a -> f a
  | Nothing -> d
end*)

(* ----------------------- *)
(* isJust / isNothing      *)
(* ----------------------- *)

(*val isJust : forall 'a. maybe 'a -> bool*)
(*let isJust mb = match mb with 
  | Just _ -> true
  | Nothing -> false
end*)

(*val isNothing : forall 'a. maybe 'a -> bool*)
(*let isNothing mb = match mb with 
  | Just _ -> false
  | Nothing -> true
end*)

(* ----------------------- *)
(* fromMaybe               *)
(* ----------------------- *)

(*val fromMaybe : forall 'a. 'a -> maybe 'a -> 'a*)
(*let fromMaybe d mb = match mb with
   | Just v  -> v
   | Nothing -> d
end*)

(* ----------------------- *)
(* map                     *)
(* ----------------------- *)

(*val map : forall 'a 'b. ('a -> 'b) -> maybe 'a -> maybe 'b*) 
(*let map f = maybe Nothing (fun v -> Just (f v))*)


(* ----------------------- *)
(* bind                    *)
(* ----------------------- *)

(*val bind : forall 'a 'b. ('a -> maybe 'b) -> maybe 'a -> maybe 'b*) 
(*let bind f = maybe Nothing f*)
val _ = export_theory()

