(*Generated by Lem from ../library-new/set_extra.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_boolTheory basic_classesTheory optionTheory lem_functionTheory integerTheory intReduce lem_numTheory listTheory rich_listTheory lem_listTheory sortingTheory lem_sortingTheory lem_setTheory;

val _ = numLib.prefer_num();



val _ = new_theory "lem_set_extra"

(******************************************************************************)
(* A library for sets                                                         *)
(*                                                                            *)
(* It mainly follows the Haskell Set-library                                  *)
(******************************************************************************)

(* ========================================================================== *)
(* Header                                                                     *)
(* ========================================================================== *)

(*open import Bool Basic_classes Maybe Function Num List Sorting*)
(*include import Set*)


(* ----------------------------*)
(* set choose (be careful !)   *)
(* --------------------------- *)

(*val choose : forall 'a. Ord 'a => set 'a -> 'a*)


(* ----------------------------*)
(* toList                      *)
(* --------------------------- *)

(*val toList        : forall 'a. Ord 'a => set 'a -> list 'a*)


(* ----------------------------*)
(* toOrderedList               *)
(* --------------------------- *)

(* "toOrderedList" returns a sorted list. Therefore the result is (given a suitable order) deterministic.
   Therefore, it is much preferred to "toList". However, it still is only defined for finite sets. So, please
   use carefully and consider using set-operations instead of translating sets to lists, performing list manipulations
   and then transforming back to sets. *) 

(*val toOrderedListBy : forall 'a. ('a -> 'a -> bool) -> set 'a -> list 'a*)

(*val toOrderedList : forall 'a. Ord 'a => set 'a -> list 'a*)

val _ = export_theory()

