open import Pervasives_non_pure

(* A (* Nested *)
     comment *)

type t = C1 | C2 of nat | C3 of bool * nat
type t2 = <| f1 : nat ; f2: bool |>
type t3 = C4 of nat

let test1 = fun x -> x

let test2 = fun (x,y) z -> x + y + z

let test61 = fun (C4 x) -> x
let test62 = fun (x,C4 y) -> x+y
let test64 = fun ((x, (y:nat)), (z)) -> x

let test65 = (*1*)fun (*2*)x (*3*)(C4 y) (*4*)z (*5*)a (*6*)(C4 b) (*7*)(C4 c) (*8*)-> (*9*)x

let test3 = function
  | (x,y) -> x + y
end

let test4 = function
    ((2:nat),y) -> y
  | (x,(3:nat)) -> x
  | _ -> 10
end

let test5 = (test1 : nat -> nat)
let test6 = C2 1
let test7 = C3 true 1

let test8 = 1::(2)::[3;4;5;]
let test9 = 1::2::[3;4;5]
let test10 = C1::C2 1::[]

let test11 = <| f1 = 1; f2 = true |>
let test12 = <| f1 = 2; f2 = false; |>
let test13 = test11.f1 + test12.f1
let test14 = <| test11 with f2 = true |>
let test15 = <| test12 with f2 = true; |>
let test16 = (1 ,true, "1234")
let test17 = begin 2 + 1 end
let test18 = if true then 4 else 5

let test19 = let x = 2 in x
let test20 = let (x,y) = (2,3) in x+y
let test21 = let f x = (x,(x+1),(x+3)) in f 1
let test22 = let f (x,y) z = x + y + z in f (1,2) 3
let test66 = let x : nat = 2 in x
let test67 = let f x : nat = 2 in f 1

let test23 = {1; 2; 3; }
let test24 = {1; 2; 3 }

let test25 = let s = {} in {1} union s
let test26 = (*1*){ n + 1 (*2*)| (*3*)forall (*4*)(n (*5*)IN {1;2;20}(*6*)) (*7*)| n < 10 (*8*)}
let test27 = { n + m | forall (m IN {}) (n IN {1;2;20}) | n < 10 }
let test28 = { n + m | forall (m MEM [1;2;3]) (n IN {1;2;20}) | n < 10 }
let test29 = (*1*)[ n + m (*2*)| (*3*)forall (*4*)(m (*5*)MEM [1;2;3](*6*)) (n
MEM [1;2;20]) (*7*)| n < 10 (*8*)]
let test30 = { (m,n) | forall (m IN {{1;2}; {3;4}; {5;6}}) (n IN m) | n < 5 }
let test31 = [ (m,n) | forall (m MEM [[1;2]; [3;4]; [5;6]]) (n MEM m) | n < 5 ]
let test32 = { x | forall (C2 x IN { C2 1; C3 true 3 }) | x < 2 }
let test42 = { x | forall (x::y IN { []; }) | x < 2 }
let test43 = { x | forall (x IN {}) ([] IN { []; [1]}) | x < 2 }
let test44 = { x | forall ([x;y] IN { []; [1]}) | x < 2 }
let test45 = { x | forall ((x:nat) IN {}) | x < 2 }
let test52 = [ x | forall ((x,y) MEM [ (1,2);(2,1) ]) | x < y ]
let test53 = [ x | forall (C2 x MEM [ C2 1; C3 true 3 ]) | x < 2 ]
let test54 = [ x | forall (x::y MEM [ []; ]) | x < 2 ]
let test55 = [ x | forall (x MEM []) ([] MEM [ []; [1]]) | x < 2 ]
let test56 = [ x | forall ([x;y] MEM [ []; [1]]) | x < 2 ]
let test57 = [ x | forall ((x:nat) MEM []) | x < 2 ]
let test33 = { x | forall ((x,y) IN { (1,2);(2,1) }) | x < y }
let test58 = [ x | forall (C4 x MEM []) | x > 10 ]
let test59 = { x | forall (C4 x IN {}) | x > 10 }

let test34 = (*1*)exists (*2*)(n (*3*)IN {1;2;20}(*4*))(*5*). n < 10
let test35 = forall (m IN {1}) (n IN {1;2;20}). n < 10
let test36 = forall (m MEM [1;2;3]) (n IN {1;2;20}). n < 10
let test37 = forall (m MEM [1;2;3]) (n MEM [1;2;20]). n < 10
let test38 = forall (m IN {{1;2}; {3;4}; {5;6}}) (n IN m). n < 5
let test39 = forall (m MEM [[1;2]; [3;4]; [5;6]]) (n MEM m). n < 5
let test71 S = forall (m MEM S) (n MEM m). n < 5

let test40 = forall (C2 x IN { C2 1; C3 true 3 }). x < 2
let test78 = exists (C2 x IN { C2 1; C3 true 3 }). x < 2
let test46 = forall (x::y IN { []; }). x < 2
let test47 = forall (x IN {}) ([] IN { []; [1]}). x < 2
let test79 = exists (x IN {}) ([] IN { []; [1]}). x < 2
let test80 = exists (_ IN { [2]; [3]}) ((x,y) IN {(1,3)}) (_ IN { []; [1]}). x < 2
let test48 = forall ([x;y] IN { []; [1]}). x < 2
let test60 = forall (C4 x MEM []). x > 10
let test49 = forall ((x:nat) IN {}). x < 2
let test41 = forall ((x,y) IN { (1,2);(2,1) }). x < y

let test68 x y = x && y
let test69 x y = x || y
let test70 x y = x --> y

let test72 = ()
let test73 = C3 true
let test74 = (C3 true) 1

type u 'a = C5 of 'a * nat
let test75 = C5 true

(*
let test76 = ( * ) 2 2
let test77 = {1;2;3;4} \ {3;2} *)
let test81 (x, []) = x

let test82 = {}
let test83 = { }
let test84 = { (* Comment *) }

let test85 = ()
let test86 = ( )
let test87 = ( (* Comment *) )

let test88 s1 s2 = setEqual s1 s2
let test89 s = null s