(******************************************************************************)
(* Boolean                                                                    *)
(******************************************************************************)

(* The type bool is hard-coded, so are true and false *)

(* ----------------------- *)
(* not                     *)
(* ----------------------- *)

val not : bool -> bool
let not b = match b with
  | true -> false
  | false -> true
end

declare hol      target_rep function not = `~`
declare ocaml    target_rep function not = `not`
declare isabelle target_rep function not = `~`
declare coq      target_rep function not = `not_b`


(* ----------------------- *)
(* and                     *)
(* ----------------------- *)

val (&&) : bool -> bool -> bool
let (&&) b1 b2 = match (b1, b2) with
  | (true, true) -> true
  | _ -> false
end


declare ascii_rep function (&&) = and_b

declare hol      target_rep function and_b = infix `/\`
declare ocaml    target_rep function and_b = infix `&&`
declare isabelle target_rep function and_b = infix `\<and>`
declare coq      target_rep function and_b = infix `&&`



(* ----------------------- *)
(* or                      *)
(* ----------------------- *)

val (||) : bool -> bool -> bool
let (||) b1 b2 = match (b1, b2) with
  | (false, false) -> false
  | _ -> true
end
declare ascii_rep function (||) = or_b

declare hol      target_rep function or_b = infix `\/`
declare ocaml    target_rep function or_b = infix `||`
declare isabelle target_rep function or_b = infix `\<or>`
declare coq      target_rep function or_b = infix `||`


(* ----------------------- *)
(* implication             *)
(* ----------------------- *)

val (-->) : bool -> bool -> bool
let (-->) b1 b2 = match (b1, b2) with
  | (true, false) -> false
  | _ -> true
end
declare ascii_rep function (-->) = imp_b

declare hol      target_rep function imp_b = infix `==>`
declare isabelle target_rep function imp_b = infix `\<implies>`
declare coq      target_rep function imp_b = infix `-->`

let inline {ocaml} imp_b x y = ((not x) || y)


(* ----------------------- *)
(* equivalence             *)
(* ----------------------- *)

val (<->) : bool -> bool -> bool
let (<->) b1 b2 = match (b1, b2) with
  | (true, true) -> true
  | (false, false) -> true
  | _ -> false
end
declare ascii_rep function (<->) = equiv_b

declare hol      target_rep function equiv_b = infix `<=>`
declare isabelle target_rep function equiv_b = infix `\<equiv>`
declare coq      target_rep function equiv_b = infix `<->`
declare ocaml    target_rep function equiv_b = infix `=`


