(******************************************************************************)
(* A library for sets                                                         *)
(*                                                                            *)
(* It mainly follows the Haskell Set-library                                  *)
(******************************************************************************)

(* ========================================================================== *)
(* Header                                                                     *)
(* ========================================================================== *)

open import Bool Basic_classes Maybe Function Num 
include import Set

declare ~{coq} rename module = lem_non_pure_set


(* ------------------------ *)
(* finite                   *)
(* ------------------------ *)

val choose : forall 'a. Ord 'a => set 'a -> 'a

declare compile_message choose = "choose is non-deterministic and only defined for non-empty sets. It's result may differ between different backends. It may even not be a logical function, because the result may depend on the low-level representation of sets and be different for two representations of the same set."

declare hol      target_rep function choose = `CHOICE`
declare isabelle target_rep function choose = `set_choose`
declare ocaml    target_rep function choose = `Pset.choose`
declare coq      target_rep function choose = `set_choose`

lemma choose_sing: (forall x. choose {x} = x)
lemma choose_in: (forall s. not (Set.null s) --> ((choose s) IN s))

