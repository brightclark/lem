(******************************************************************************)
(* A library for sum types                                                    *)
(******************************************************************************)

(* ========================================================================== *)
(* Header                                                                     *)
(* ========================================================================== *)

declare rename module = Lem_either

open import Basic_classes List Tuple

type either 'a 'b
  = Left  of 'a
  | Right of 'b

(* -------------------------------------------------------------------------- *)
(* Equality.                                                                  *)
(* -------------------------------------------------------------------------- *)

let eitherEqual (left: either 'a 'b) (right: either 'a 'b) =
  match (left, right) with
    | (Left l, Left l') -> l = l'
    | (Right r, Right r') -> r = r'
    | _ -> false
  end
let inline {hol;isabelle;coq} eitherEqual = unsafe_structural_equality

instance forall 'a 'b. Eq 'a, Eq 'b => (Eq (either 'a 'b))
  let (=) = eitherEqual
end

(* -------------------------------------------------------------------------- *)
(* Utility functions.                                                         *)
(* -------------------------------------------------------------------------- *)

val either : forall 'a 'b 'c. ('a -> 'c) -> ('b -> 'c) -> either 'a 'b -> 'c
let either fa fb x = match x with
  | Left a -> fa a
  | Right b -> fb b
end

val partitionEither : forall 'a 'b. list (either 'a 'b) -> (list 'a * list 'b)
let rec partitionEither l = match l with
  | [] -> ([], [])
  | x :: xs -> begin
      let (ll, rl) = partitionEither xs in
      match x with 
        | Left l -> (l::ll, rl)
        | Right r -> (ll, r::rl)
      end
    end
end

val lefts : forall 'a 'b. list (either 'a 'b) -> list 'a
let lefts l = fst (partitionEither l)

val rights : forall 'a 'b. list (either 'a 'b) -> list 'b
let rights l = snd (partitionEither l)
