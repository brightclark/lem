(******************************************************************************)
(* A library for lists - the non-pure part                                    *)
(*                                                                            *)
(* It mainly follows the Haskell List-library                                 *)
(******************************************************************************)



(* ========================================================================== *)
(* Header                                                                     *)
(* ========================================================================== *)


(* rename module to clash with existing list modules of targets
   problem: renaming from inside the module itself! *)

(* declare rename module = lem_list_non_pure *)

open import Bool Maybe Basic_classes Tuple Num List

(* ------------------------- *)
(* head of non-empty list    *)
(* ------------------------- *)
val head : forall 'a. list 'a -> 'a
let head l = match l with | x::xs -> x end

declare compile_message head = "head is only defined on non-empty list and should therefore be avoided. Use maching instead and handle the empty case explicitly."
declare hol      target_rep function head = `HD`
declare ocaml    target_rep function head = `List.hd`
declare isabelle target_rep function head = `List.hd`

assert head_simple_1: (head [3;1] = 3)
assert head_simple_2: (head [5;4] = 5)


(* ------------------------- *)
(* tail of non-empty list    *)
(* ------------------------- *)
val tail : forall 'a. list 'a -> list 'a
let tail l = match l with | x::xs -> xs end

declare compile_message tail = "tail is only defined on non-empty list and should therefore be avoided. Use maching instead and handle the empty case explicitly."

declare hol      target_rep function tail = `TL`
declare ocaml    target_rep function tail = `List.tl`
declare isabelle target_rep function tail = `List.tl`

assert tail_simple_1: (tail [3;1] = [1])
assert tail_simple_2: (tail [5] = [])
assert tail_simple_3: (tail [5;4;3;2] = [4;3;2])

lemma head_tail_cons: (forall l. length l > 0 --> (l = (head l)::(tail l)))


(* ------------------------- *)
(* last                      *)
(* ------------------------- *)
val last : forall 'a. list 'a -> 'a
let rec last l = match l with | [x] -> x | x1::x2::xs -> last (x2 :: xs) end
declare compile_message last = "last is only defined on non-empty list and should therefore be avoided. Use maching instead and handle the empty case explicitly."

declare hol      target_rep function last = `LAST`
declare isabelle target_rep function last = `List.last`


assert last_simple_1: (last [3;1] = 1)
assert last_simple_2: (last [5;4] = 4)


(* ------------------------- *)
(* init                      *)
(* ------------------------- *)

(* All elements of a non-empty list except the last one. *)
val init : forall 'a. list 'a -> list 'a
let rec init l = match l with | [x] -> [] | x1::x2::xs -> x1::(init (x2::xs)) end

declare compile_message init = "init is only defined on non-empty list and should therefore be avoided. Use maching instead and handle the empty case explicitly."

declare hol      target_rep function init = `FRONT`
declare isabelle target_rep function init = `List.butlast`

assert init_simple_1: (init [3;1] = [3])
assert init_simple_2: (init [5] = [])
assert init_simple_3: (init [5;4;3;2] = [5;4;3])

lemma init_last_append: (forall l. length l > 0 --> (l = (init l) ++ [last l]))


(* ------------------------- *)
(* foldl1 / foldr1           *)
(* ------------------------- *)

(* folding functions for non-empty lists,
    which don`t take the base case *)
val foldl1 : forall 'a. ('a -> 'a -> 'a) -> list 'a -> 'a
let foldl1 f (x :: xs) = foldl f x xs
declare compile_message foldl1 = "foldl1 is only defined on non-empty lists. Better use foldl or explicit pattern matching."

val foldr1 : forall 'a. ('a -> 'a -> 'a) -> list 'a -> 'a
let foldr1 f (x :: xs) = foldr f x xs
declare compile_message foldr1 = "foldr1 is only defined on non-empty lists. Better use foldr or explicit pattern matching."

  
(* ------------------------- *)
(* nth element               *)
(* ------------------------- *)

(* get the nth element of a list *)
val nth : forall 'a. list 'a -> nat -> 'a
let nth l n = match index l n with Just e -> e end
declare compile_message foldl1 = "nth is undefined for too large indices, use carefully"

declare hol      target_rep function nth l n = `EL` n l
declare ocaml    target_rep function nth     = `List.nth`
declare isabelle target_rep function nth     = `List.nth`
declare coq      target_rep function nth l n = `List.nth` n l

assert nth_0: (nth [0;1;2;3;4;5] 0 = 0)
assert nth_1: (nth [0;1;2;3;4;5] 1 = 1)
assert nth_2: (nth [0;1;2;3;4;5] 2 = 2)
assert nth_3: (nth [0;1;2;3;4;5] 3 = 3)
assert nth_4: (nth [0;1;2;3;4;5] 4 = 4)
assert nth_5: (nth [0;1;2;3;4;5] 5 = 5)

lemma nth_index: (forall l n e. n < length l --> index l n = Just (nth l n))


(* ------------------------- *)
(* Find_non_pure             *)
(* ------------------------- *)
val find_non_pure : forall 'a. ('a -> bool) -> list 'a -> 'a 
let find_non_pure P l = match (find P l) with 
  | Just e      -> e
end

declare compile_message find_non_pure = "find_non_pure is undefined, if no element with the property is in the list. Better use find."

