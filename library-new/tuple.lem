(******************************************************************************)
(* Tuples                                                                     *)
(******************************************************************************)

(* The type for tuples (pairs) is hard-coded, so here only a few functions are used *)

open import Bool Basic_classes

(* ----------------------- *)
(* fst                     *)
(* ----------------------- *)

val fst : forall 'a 'b. 'a * 'b -> 'a
let fst (v1, v2) = v1

declare hol      target_rep function fst = `FST`
declare ocaml    target_rep function fst = `fst`
declare isabelle target_rep function fst = `fst`
declare coq      target_rep function fst = `fst`


(* ----------------------- *)
(* snd                     *)
(* ----------------------- *)

val snd : forall 'a 'b. 'a * 'b -> 'b
let snd (v1, v2) = v2

declare hol      target_rep function snd = `SND`
declare ocaml    target_rep function snd = `snd`
declare isabelle target_rep function snd = `snd`
declare coq      target_rep function snd = `snd`

lemma fst_snd: (forall v. v = (fst v, snd v))


(* ----------------------- *)
(* curry                   *)
(* ----------------------- *)

val curry : forall 'a 'b 'c. ('a * 'b -> 'c) -> ('a -> 'b -> 'c)
let curry f v1 v2 = f (v1, v2)

declare hol      target_rep function curry = `CURRY`
declare isabelle target_rep function curry = `curry`


(* ----------------------- *)
(* uncurry                 *)
(* ----------------------- *)

val uncurry : forall 'a 'b 'c. ('a -> 'b -> 'c) -> ('a * 'b -> 'c) 
let uncurry f v = f (fst v) (snd v)

declare hol      target_rep function uncurry = `UNCURRY`
declare isabelle target_rep function uncurry = `split`

lemma curry_uncurry: (forall f xy. uncurry (curry f) xy = f xy)
lemma uncurry_curry: (forall f x y. curry (uncurry f) x y = f x y)


(* ----------------------- *)
(* swap                    *)
(* ----------------------- *)

val swap : forall 'a 'b. ('a * 'b) -> ('b * 'a) 
let swap (v1, v2) = (v2, v1)

declare hol      target_rep function swap = `SWAP`


