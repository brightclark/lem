open import Bool Maybe List Num

(* -------------------------------------------------------------------------- *)
(* Utility function on (ASCII) characters.                                    *)
(* -------------------------------------------------------------------------- *)

val ord : char -> nat
val chr : nat -> char

(* -------------------------------------------------------------------------- *)
(* To and from lists of chars.                                                *)
(* -------------------------------------------------------------------------- *)

val toCharList : string -> list char
val fromCharList : list char -> string

(* -------------------------------------------------------------------------- *)
(* Show and Read.                                                             *)
(* -------------------------------------------------------------------------- *)

class (Show 'a)
  val show : 'a -> string
end

class (Read 'a)
  val read : string -> maybe 'a
end

(* -------------------------------------------------------------------------- *)
(* Instances for the above.                                                   *)
(* -------------------------------------------------------------------------- *)

val natToString : nat -> string
val stringToNat : string -> maybe nat

val naturalToString : natural -> string
val stringToNatural : string -> maybe natural

val int32ToString : int32 -> string
val stringToInt32 : string -> maybe int32

val int64ToString : int64 -> string
val stringToInt64 : string -> maybe int64

val integerToString : integer -> string
val stringToInteger : string -> maybe integer

val float32ToString : float32 -> string
val stringToFloat32 : string -> maybe float32

val float64ToString : float64 -> string
val stringToFloat64 : string -> maybe float64

val rationalToString : rational -> string
val stringToRational : string -> maybe rational

instance (Show nat)
  let show = natToString
end

instance (Read nat)
  let read = stringToNat
end

instance (Show natural)
  let show = naturalToString
end

instance (Read natural)
  let read = stringToNatural
end

instance (Show int32)
  let show = int32ToString
end

instance (Read int32)
  let read = stringToInt32
end

instance (Show int64)
  let show = int64ToString
end

instance (Read int64)
  let read = stringToInt64
end

instance (Show integer)
  let show = integerToString
end

instance (Read integer)
  let read = stringToInteger
end

instance (Show float32)
  let show = float32ToString
end

instance (Read float32)
  let read = stringToFloat32
end

instance (Show float64)
  let show = float64ToString
end

instance (Read float64)
  let read = stringToFloat64
end

instance (Show rational)
  let show = rationalToString
end

instance (Read rational)
  let read = stringToRational
end

let boolToString (b: bool): string =
  match b with
    | true  -> "true"
    | false -> "false"
  end

instance (Show bool)
  let show = boolToString
end

let maybeToString (m: maybe 'a): string =
  match m with
    | Nothing -> "Nothing"
    | Just j  -> show j
  end

instance forall 'a. Show 'a => (Show (maybe 'a))
  let show = maybeToString
end